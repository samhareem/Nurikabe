##Nurikabe

###About:

Nurikabe puzzles were first introduced by japanese publisher Nikoli in 1991. The puzzles consist of a rectangular grid of cells, with certain cells containing a number. These numbers specify how many white cells are connected to the cell containing the number, forming what is called a "wall". To solve the puzzle, the player must paint cells black, creating a "stream" that runs through the puzzle board and separates it into "islands" of white cells.

The program offers a GUI that allows the user to select one of the available puzzles and then solve it. Users can also add new puzzles to the program using text files, but this requiers them to rebuild the code.

###Users:

Solvers (basic users): Can use the program to solve the available puzzles.

Creators (advanced users): Can add puzzles to the program and send the updated version to other users, or send .txt files with the puzzle information to other users. 

###Features:

Version 1.0 of Nurikabe supports:

    1. Multiple levels, more of which can be added via text files.
    2. Score keeping, which tracks how many mistakes the user has made.

Features to be implemented later on:

    1. Record high scores for each level
    2. Allow the user to create levels of their own 
    
###Program structure

The program has three packages; model, GUI and controller. These roughtly correspond with a Model-View-Controller design principle. The controller package contains the Nurikabe and Reader classes. The Nurikabe class ontains the main method of the program and acts as the controller class. It contains methods for updating and fetching information from the model. The Reader class is a utility used by the Nurikabe class, which is used to read text files containing puzzle information.

The Board class, located in the model package, contains information about the puzzle being solved. It's methods are primarily concerned with returning information about the current board and updating it if necessary.

The Gui class in the GUI package contains all information about the user interface. It communicates with the Nurikabe class, turning user actions (choosing and starting a level, solving the puzzle) into data actions affecting the board.  